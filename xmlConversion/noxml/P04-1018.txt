
	
		This paper proposes a new approach for coreference resolution which uses the Bell tree to represent the search space and casts the coreference resolution problem as finding the best path from the root of the Bell tree to the leaf nodes.
		A Maximum Entropy model is used to rank these paths.
		The coreference performance on the 2002 and 2003 Automatic Content Extraction (ACE) data will be reported.
		We also train a coreference system using the MUC6 data and competitive results are obtained.
	
	
			In this paper, we will adopt the terminologies used in the Automatic Content Extraction (ACE) task (NIST, 2003).
			Coreference resolution in this context is defined as partitioning mentions into entities.
			A mention is an instance of reference to an object, and the collection of mentions referring to the same object in a document form an entity.
			For example, in the following sentence, mentions are underlined: “The American Medical Association voted yesterday to install the heir apparent as its president-elect, rejecting a strong, upstart challenge by a District doctor who argued that the nation’s largest physicians’ group needs stronger ethics and new leadership.” “American Medical Association”, “its” and “group” belong to the same entity as they refer to the same object.Early work of anaphora resolution focuses on find ing antecedents of pronouns (Hobbs, 1976; Ge et al., 1998; Mitkov, 1998), while recent advances (Soon et al., 2001; Yang et al., 2003; Ng and Cardie, 2002; Ittycheriah et al., 2003) employ statistical machine learning methods and try to resolve reference among all kinds of noun phrases (NP), be it a name, nominal, or pronominal phrase – which is the scope of this paper as well.
			One common strategy shared by (Soon et al., 2001; Ng and Cardie, 2002; Ittycheriah et al., 2003) is that a statistical model is trained to measure how likely a pair of mentions corefer; then a greedy procedure is followed to group mentions into entities.
			While this approach has yielded encouraging results, the way mentions are linked is arguably suboptimal in that an instant decision is made when considering whether two mentions are linked or not.
			In this paper, we propose to use the Bell tree to represent the process of forming entities from mentions.
			The Bell tree represents the search space of the coreference resolution problem – each leaf node corresponds to a possible coreference outcome.
			We choose to model the process from mentions to entities represented in the Bell tree, and the problem of coreference resolution is cast as finding the “best” path from the root node to leaves.
			A binary maximum entropy model is trained to compute the linking probability between a partial entity and a mention.
			The rest of the paper is organized as follows.
			In Section 2, we present how the Bell tree can be used to represent the process of creating entities from mentions and the search space.
			We use a maximum entropy model to rank paths in the Bell tree, which is discussed in Section 3.
			After presenting the search strategy in Section 4, we show the experimental results on the ACE 2002 and 2003 data, and the Message Understanding Conference (MUC) (MUC, 1995) data in Section 5.
			We compare our approach with some recent work in Section 6.
	
	
			Let us consider traversing mentions in a document from beginning (left) to end (right).
			The process of forming entities from mentions can be represented by a tree structure.
			The root node is the initial state of the process, which consists of a partial entity containing the first mention of a document.
			The second mention is (a) [1] 2* 3 [1] (b1) [12] 3* (b2) [1][2] 3* [12] [1] [2] [123] [12][3] [13][2] (c1) (c2) (c3) large (even for a document with a moderate number of mentions), it is difficult to estimate a distribution over leaves directly.
			Instead, we choose to model the process from mentions to entities, or in other words, score paths from the root to leaves in the Bell tree.
			A nice property of the Bell tree representatio n is that the number of linking or starting steps is the same for [1] [23] (c4) [1][2][3] (c5) Figure 1: Bell tree representation for three mentions: numbers in [] denote a partial entity.
			In-focus entities are marked on the solid arrows, and active mentions are marked by *.
			Solid arrows signify that a mention is linked with an in-focus partial entity while dashed arrows indicate starting of a new entity.
			added in the next step by either linking to the existing entity, or starting a new entity.
			A second layer of nodes are created to represent the two possible outcomes.
			Subsequent mentions are added to the tree in the same manner.
			The process is mention-synchronous in that each layer of tree nodes are created by adding one mention at a time.
			Since the number of tree leaves is the number of possible coreference outcomes and it equals the Bell Number (Bell, 1934), the tree is called the Bell tree.
			The Bell Number is the number of ways of partitioning distinguishable objects (i.e., mentions) into nonempty disjoint subsets (i.e., entities).
			The Bell Number has a “closed” formula and it increases rapidly as in creases: ! Clearly, an efficient search strategy is necessary, and it will be addressed in Section 4.
			Figure 1 illustrates how the Bell tree is created for a document with three mentions.
			The initial node consists of the first partial entity [1] (i.e., node (a) in Figure 1).
			Next, mention 2 becomes active (marked by “*” in node (a)) and can either link with the partial entity [1] and result in a new node (b1), or start a new entity and create another node (b2).
			The partial entity which the active mention considers linking with is said to be in-focus.
			In-focus entities are highlighted on the solid arrows in Figure 1.
			Similarly, mention 3 will be active in the next stage and can take five possible actions, which create five possible coreference results shown in node (c1) through (c5).
			Under the derivation illustrated in Figure 1, each leaf node in the Bell tree corresponds to a possible coreference outcome, and there is no other way to form entities.
			The Bell tree clearly represents the search space of the coreference resolution problem.
			The coreference resolution can therefore be cast equivalently as finding the “best” leaf node.
			Since the search space isall the hypotheses.
			This makes it easy to rank them us ing the “local” linking and starting probabilities as the number of factors is the same.
			The Bell tree representation is also incremental in that mentions are added sequentially.
			This makes it easy to design a decoder and search algorithm.
	
	
			3.1 Linking and Starting Model.
			We use a binary conditional model to compute the probability that an active mention links with an in- focus partial entity.
			The conditions include all the partially-formed entities before, the focus entity index, and the active mention.
			Formally, let be mentions in a document.
			Mention index represents the order it appears in the document.
			Let be an entity, and be the (many-to-one) map from mention index to entity index . For an active mention index , define for some the set of indices of the partially-established entities to the left of (note that ), and the set of the partially-established entities.
			The link model is then (1) the probability linking the active mention with the in-focus entity . The random variable takes value from the set and signifies which entity is in focus; takes binary value and is if links with . As an example, for the branch from (b2) to (c4) in Figure 1, the active mention is “3”, the set of partial entities to the left of “3” is , the active entity is the second partial entity “[2]”.
			Probability measures how likely men tion “3” links with the entity “[2].” The model only computes how likely links with ; It does not say anything about the possibility that starts a new entity.
			Fortunately, the starting probability can be computed using link probabilities (1), as shown now.
			Since starting a new entity means that does not link with any entities in , the probability of starting a new entity, , can be computed as (2) the model in (Morton, 2000; Soon et al., 2001; Ng and Cardie, 2002) while (8) has more conditions.
			We use maximum entropy model (Berger et al., 1996) for both the mention-pair model (9) and the entity-mention model (8): (3) (3) indicates that the probability of starting an en tity can be computed using the linking probabilities , provided that the marginal where is a feature and is its weight; (10) (11) is known.
			In this paper, is approximated as: if otherwise (4) is a normalizing factor to ensure that (10) or (11) is a probability.
			Effective training algorithm exists (Berger et al., 1996) once the set of features is selected.
			The basic features used in the models are tabulated in Table 1.
			Features in the lexical category are applicable to non-pronominal mentions only.
			Distance features char With the approximation (4), the starting probability (3) is (5) The linking model (1) and approximated starting model (5) can be used to score paths in the Bell tree.
			For example, the score for the path (a)-(b2)-(c4) in Figure 1 is the product of the start probability from (a) to (b2) and the linking probability from (b2) to (c4).
			Since (5) is an approximation, not true probability, a constant is introduced to balance the linking probability and starting probability and the starting probability becomes: (6) If , it penalizes creating new entities; Therefore, is called start penalty.
			The start penalty can be used to balance entity miss and false alarm.
			3.2 Model Training and Features.
			The model depends on all partial entities , which can be very expensive.
			After making some modeling assumptions, we can approximate it as: (7) (8) (9) From (7) to (8), entities other than the one in focus, , are assumed to have no influence on the decision of linking with .
			(9) further assumes that the entity-mention score can be obtained by the maximum mention pair score.
			The model (9) is very similar to acterize how far the two mentions are, either by the number of tokens, by the number of sentences, or by the number of mentions in-between.
			Syntactic features are derived from parse trees output from a maximum entropy parser (Ratnaparkhi, 1997).
			The “Count” feature calculates how many times a mention string is seen.
			For pronominal mentions, attributes such as gender, number, possessiveness and reflexiveness are also used.
			Apart from basic features in Table 1, composite features can be generated by taking conjunction of basic features.
			For example, a distance feature together with reflexiveness of a pronoun mention can help to capture that the antecedent of a reflexive pronoun is often closer than that of a non-reflexive pronoun.
			The same set of basic features in Table 1 is used in the entity-mention model, but feature definitions are slightly different.
			Lexical features, including theacronym features, and the apposition feature are com puted by testing any mention in the entity against the active mention . Editing distance for is defined as the minimum distance over any non-pronoun mentions and the active mention.
			Distance features are computed by taking minimum between mentions in the entity and the active mention.
			In the ACE data, mentions are annotated with three levels: NAME, NOMINAL and PRONOUN.
			For each ACE entity, a canonical mention is defined as the longest NAME mention if available; or if the entity does not have a NAME mention, the most recent NOMINAL mention; if there is no NAME and NOMINAL mention, the most recent pronoun mention.
			In the entity-mention model, “ncd”,“spell” and “count” features are computed over the canonical mention of the in-focus entity and the active mention.
			Conjunction features are used in the entity-mention model too.
			The mention-pair model is appealing for its simplicity: features are easy to compute over a pair of men Cat ego ry Fe atu res Re ma rk Le xi ca l exa ct_ str m left _su bs m rig ht_ sub sm acr on ym edi t_d ist spe ll nc d 1 if tw o me nti ons hav e the sa me spe llin g; 0 oth er wis e 1 if on e me nti on is a left sub stri ng of the oth er; 0 oth er wis e 1 if on e me nti on is a rig ht sub stri ng of the oth er; 0 oth er wis e 1 if on e me nti on is an acr on ym of the oth er; 0 oth er wis e qu ant ize d edi tin g dis tan ce bet we en tw o me nti on stri ngs pai r of act ual me nti on stri ngs nu mb er of diff ere nt cap ital ize d wo rds in tw o me nti ons Di sta nc e tok en _di st sen t_d ist ga p_ dis t ho w ma ny tok ens tw o me nti ons are apa rt (qu ant ize d) ho w ma ny sen ten ces tw o me nti ons are apa rt (qu ant ize d) ho w ma ny me nti ons in bet we en the tw o me nti ons in qu esti on (qu ant ize d) S yn ta x PO S_ pai r ap pos itio n POS pai r of tw o me nti on hea ds 1 if tw o me nti ons are ap pos itiv e; 0 oth er wis e C o u nt co unt pai r of (qu ant ize d) nu mb ers, eac h co unt ing ho w ma ny tim es a me nti on stri ng is see n Pr on ou n ge nd er nu mb er pos ses siv e refl exi ve pai r of attr ibu tes of {fe ma le, ma le, ne utr al, un kn ow n } pai r of attr ibu tes of {si ng ula r, plu ral, un kn ow n} 1 if a pro no un is pos ses siv e; 0 oth er wis e 1 if a pro no un is refl exi ve; 0 oth er wis e Table 1: Basic features used in the maximum entropy model.
			tions; its drawback is that information outside the mention pair is ignored.
			Suppose a document has three mentions “Mr.
			Clinton”, “Clinton” and “she”, appearing in that order.
			When considering the mention pair “Clinton” and “she”, the model may tend to link them because of their proximity; But this mistake can be easily avoided if “Mr.
			Clinton” and “Clinton” have been put into the same entity and the model knows “Mr.
			Clinton” referring to a male while “she” is female.
			Since gender and number information is propagated at the entity level, the entity-mention model is able to check the gender consistency when considering the active mention “she”.
			3.3 Discussion.
			There is an in-focus entity in the condition of the linking model (1) while the starting model (2) conditions on all left entities.
			The disparity is intentional as the starting action is influenced by all established entities on the left.
			(4) is not the only way can be approximated.
			For example, one could use a uniform distribution over . We experimented several schemes of approximation, including a uniform distribution, and (4) worked the best and is adopted here.
			One may consider training directly and use it to score paths in the Bell tree.
			The problem is that 1) the size of from which takes value is variable; 2) the start action depends on all entities in , which makes it difficult to train directly.
	
	
			As shown in Section 2, the search space of the coreference problem can be represented by the Bell tree.
			Thus, the search problem reduces to creating the Bell tree while keeping track of path scores and picking the top-N best paths.
			This is exactly what is described in Algorithm 1.
			In Algorithm 1, contains all the hypotheses, or paths from the root to the current layer of nodes.
			Variable stores the cumulative score for a coreference result . At line 1, is initialized with a single entity consisting of mention , which corresponds to the root node of the Bell tree in Figure 1.
			Line 2 to 15 loops over the remaining mentions ( to ), and for each mention , the algorithm extends each result in (or a path in the Bell tree) by either linking with an existing entity (line 5 to 10), or starting an entity (line 11 to 14).
			The loop from line 2 to 12 corresponds to creating a new layer of nodes for the active mention in the Bell tree.
			in line 4 and in line 6 and 11 have to do with pruning, which will be discussed shortly.
			The last line returns top results, where denotes the result ranked by : Algorithm 1 Search Algorithm Input: mentions ; Output: top entity results 1:Initialize: 2:for to 3: foreach node 4: compute . 5: foreach 6: if ( ) { 8: Extend to by linking with 9: 10: } 11: if( ) { 12: Extend to by starting . 13: 14: } 15: . 16:return The complexity of the search Algorithm 1 is the total number of nodes in the Bell tree, which is , where is the Bell Number.
			Since the Bell number increases rapidly as a function of the number of mentions, pruning is necessary.
			We prune the search space in the following places: Local pruning: any children with a score below a fixed factor of the maximum score are pruned.
			This is done at line 6 and 11 in Algorithm 1.
			The operation in line 4 is: Block 89 is carried out only ifand block 1213 is car ried out only if . Global pruning: similar to local pruning except that this is done using the cumulative score . Pruning based on the global scores is carried out at line 15 of Algorithm 1.
			Limit hypotheses: we set a limit on the maximum number of live paths.
			This is useful when a document contains many mentions, in which case excessive number of paths may survive local and global pruning.
			Whenever available, we check the compatibility of entity types between the in-focus entity and the active mention.
			A hypothesis with incompatible entity types is discarded.
			In the ACE annotation, every mention has an entity type.
			Therefore we can eliminate hypotheses with two mentions of different types.
	
	
			5.1 Performance Metrics.
			The official performance metric for the ACE task is ACE-value.
			ACE-value is computed by first calculating the weighted cost of entity insertions, deletions and substitutions; The cost is then normalized against the cost of a nominal coreference system which outputs no entities; The ACE-value is obtained by subtracting the normalized cost from . Weights are designed to emphasize NAME entities, while PRONOUN entities (i.e., an entity consisting of only pronominal mentions) carry very low weights.
			A perfect coreference system will get a ACE-value while a system outputs no entities will get a ACE-value.
			Thus, the ACE-value can be interpreted as percentage of value a system has, relative to the perfect system.
			Since the ACE-value is an entity-level metric and is weighted heavily toward NAME entities, we also measure our system’s performance by an entity-constrained mention F-measure (henceforth “ECM-F”).
			The metric first aligns the system entities with the reference entities so that the number of common mentions is maximized.
			Each system entity is constrained to align with at most one reference entity, and vice versa.
			For example, suppose that a reference document contains three entities: while a system outputs four entities: , then the best alignment (from reference to system) would be , and other entities are not aligned.
			The number of common mentions of the best alignment is (i.e., and ), which leads to a mention recall and precision . The ECM-F measures the percentage of mentions that are in the “right” entities.
			For tests on the MUC data, we report both F-measure using the official MUC score (Vilain et al., 1995) and ECM-F.
			The MUC score counts the common links between the reference and the system output.
			5.2 Results on the ACE data.
			The system is first developed and tested using the ACE data.
			The ACE coreference system is trained with documents (about words) of ACE 2002 training data.
			A separate documents ( words) is used as the development-test (Devtest) set.
			In 2002, NIST released two test sets in February (Feb02) and September (Sep02), respectively.
			Statistics of the three test sets is summarized in Table 2.
			We will report coreference results on the true mentions of the three test sets.
			Tes tSe t# doc s #-words #-mentions #-entities De vte st Fe b0 2 Se p0 2 9 0 50426 7470 2891 9 7 52677 7665 3104 1 8 Table 2: Statistics of three test sets.
			For the mention-pair model, training events are generated for all compatible mention-pairs, which results in about events, about of which are positive examples.
			The full mention-pair model uses about features; Most are conjunction features.
			For the entity-mention model, events are generated by walking through the Bell tree.
			Only events on the true path (i.e., positive examples) and branches emitting from a node on the true path to a node not on the true path (i.e., negative examples) are generated.
			For example, in Figure 1, suppose that the path (a)-(b2)-(c4) is the truth, then positive training examples are starting event from (a) to (b2) and linking event from (b2) to (c4); While the negative examples are linking events from (a) to (b1), (b2) to (c3), and the starting event from (b2) to (c5).
			This scheme generates about events, out of which about are positive training examples.
			The full entity-mention model has about features, due to less number of conjunction features and training examples.Coreference results on the true mentions of the De vtest, Feb02, and Sep02 test sets are tabulated in Table 3.
			These numbers are obtained with a fixed search beam and pruning threshold (widening the search beam or using a smaller pruning threshold did not change results significantly).
			The mention-pair model in most cases performs better than the mention-entity model by both ACE-value and ECM-F measure although none of the differences is statistically significant (pairwise t-test) at p-value . Note that, however, the mention-pair model uses times more features than the entity-pair model.
			We 0.9 0.85 0.8 0.75 0.7 ECM−F ACE−valuealso observed that, because the score between the in 0.65 −2.5 −2 −1.5 −1 −0.5 0 focus entity and the active mention is computed by (9) in the mention-pair model, the mention-pair sometimes mistakenly places a male pronoun and female pronoun into the same entity, while the same mistake is avoided in the entity-mention model.
			Using the canonical mentions when computing some features (e.g., “spell”) in the entity-mention model is probably not optimal and it is an area that needs further research.
			When the same mention-pair model is used to score the ACE 2003 evaluation data, an ACE-value is obtained on the system1 mentions.
			After retrained with Chinese and Arabic data (much less training data than English), the system got and ACE-value on the system mentions of ACE 2003 evaluation data for Chinese and Arabic, respectively.
			The results for all three languages are among the top-tier submission systems.
			Details of the mention detection and coreference system can be found in (Florian et al., 2004).
			Since the mention-pair model is better, subsequent analyses are done with the mention pair model only.
			5.2.1 Feature Impact To see how each category of features affects the performance, we start with the aforementioned mention- pair model, incrementally remove each feature category, retrain the system and test it on the Devtest set.
			The result is summarized in Table 4.
			The last column lists the number of features.
			The second row is the full mention-pair model, the third through seventh row correspond to models by removing the syntactic features (i.e., POS tags and apposition features), count features, distance features, mention type and level information, and pair of mention-spelling features.
			If a basic feature is removed, conjunction features using that basic feature are also removed.
			It is striking that the smallest system consisting of only features (string and substring match, acronym, edit distance and number of different capitalized words) can get as much as ACE-value.
			Table 4 shows clearly that these lexical features and the distance features are the most important.
			Sometimes the ACE-value increases after remov ing a set of features, but the ECM-F measure tracks nicely the trend that the more features there are, the better the performance is. This is because the ACE-value 1 System mentions are output from a mention detection system.
			l o g Figure 2: Performance vs. log start penalty is a weighted metric.
			A small fluctuation of NAME entities will impact the ACE-value more than many NOMINAL or PRONOUN entities.
			M o d e l A CE val (% ) ECM-F(%)# fea tur es F u l l s y n t a x c o u n t d i s t ty pe /le ve l s p e l l 8 9 . 8 7 3 . 2 0 ( 2 . 9 ) 8 9 . 0 7 2 . 6 ( 2 . 5 ) 8 9 . 4 7 2 . 0 ( 3 . 3 ) 8 6 . 7 * 6 6 . 2 ( 3 . 9 ) 8 6 . 8 6 5 . 7 ( 2 . 2 ) 8 6 . 0 6 4 . 4 ( 1 . 9 ) 1 7 1 K 7 1 K 7 0 K 2 4 K 5 . 4 K 3 9 Table 4: Impact of feature categories.
			Numbers after are the standard deviations.
			* indicates that the result is significantly (pairwise t-test) different from the line above at . 5.2.2 Effect of Start Penalty As discussed in Section 3.1, the start penalty can be used to balance the entity miss and false alarm.
			To see this effect, we decode the Devtest set by varying the start penalty and the result is depicted in Figure 2.
			The ACE-value and ECM-F track each other fairly well.
			Both achieve the optimal when . 5.3 Experiments on the MUC.
			data To see how the proposed algorithm works on the MUC data, we test our algorithm on the MUC6 data.
			To minimize the change to the coreference system, we first map the MUC data into the ACE style.
			The original MUC coreference data does not have entity types (i.e., “ORGANIZATION”, “LOCATION” etc), required in the ACE style.
			Part of entity types can be recovered from the corresponding named-entity annotations.
			The recovered named-entity label is propagated to all mentions belonging to the same entity.
			There are 504 out of 2072 mentions of the MUC6 formal test set and 695 out of 2141 mentions of the MUC6 dry-run test set that cannot be assigned labels by this procedure.
			A D e v t e s t F e b 0 2 S e p 0 2 M od el A CE val (% ) ECM-F(%) A CE val (% ) ECM-F(%) A CE val (% ) ECM-F(%) M P E M 8 9 . 8 7 3 . 2 ( 2 . 9 ) 8 9 . 9 7 1 . 7 ( 2 . 4 ) 9 0 . 0 7 3 . 1 ( 4 . 0 ) 8 8 . 2 7 0 . 8 ( 3 . 9 ) 8 8 . 0 7 3 . 1 ( 6 . 8 ) 8 7 . 6 7 2 . 4 ( 6 . 2 ) Table 3: Coreference results on true mentions: MP – mention-pair model; EM – entity-mention model; ACE-val: ACE-value; ECM-F: Entity-constrained Mention F-measure.
			MP uses features while EM uses only features.
			None of the ECM-F differences between MP and EM is statistically significant at . generic type “UNKNOWN” is assigned to these mentions.
			Mentions that can be found in the named-entity annotation are assumed to have the ACE mention level “NAME”; All other mentions other than English pronouns are assigned the level “NOMINAL.” After the MUC data is mapped into the ACE-style, the same set of feature templates is used to train a coreference system.
			Two coreference systems are trained on the MUC6 data: one trained with 30 dry-run test documents (henceforth “MUC6-small”); the other trained with 191 “dryrun-train” documents that have both coreference and named-entity annotations (henceforth “MUC6-big”) in the latest LDC release.
			To use the official MUC scorer, we convert the output of the ACE-style coreference system back into the MUC format.
			Since MUC does not require entity label and level, the conversion from ACE to MUC is “loss- less.” Table 5 tabulates the test results on the true mentions of the MUC6 formal test set.
			The numbers in the table represent the optimal operating point determined by ECM-F.
			The MUC scorer cannot be used since it inherently favors systems that output fewer number of entities (e.g., putting all mentions of the MUC6 formal test set into one entity will yield a recall and precision of links, which gives an F-measure).
			The MUC6-small system compares favorably with the similar experiment in Harabagiu et al.
			(2001) in which an F-measure is reported.
			When measured by the ECM-F measure, the MUC6-small system has the same level of performance as the ACE system, while the MUC6-big system performs better than the ACE system.
			The results show that the algorithm works well on the MUC6 data despite some information is lost in the conversion from the MUC format to the ACE format.
			S y s t e m M U C F me as ure ECM-F M U C6 sm all M U C6 bi g 8 3 . 9 % 7 2 . 1 % 8 5 . 7 % 7 6 . 8 % Table 5: Results on the MUC6 formal test set.
	
	
			There exists a large body of literature on the topic of coreference resolution.
			We will compare this study with some relevant work using machine learning or statistical methods only.
			Soon et al.
			(2001) uses a decision tree model for coreference resolution on the MUC6 and MUC7 data.
			Leaves of the decision tree are labeled with “link” or “not-link” in training.
			At test time, the system checks a mention against all its preceding mentions, and the first one labeled with “link” is picked as the antecedent.
			Their work is later enhanced by (Ng and Cardie, 2002) in several aspects: first, the decision tree returns scores instead of a hard-decision of “link” or “not-link” so that Ng and Cardie (2002) is able to pick the “best” candidate on the left, as opposed the first in (Soon et al., 2001); Second, Ng and Cardie (2002) expands the feature sets of (Soon et al., 2001).
			The model in (Yang et al., 2003) expands the conditioning scope by including a competing candidate.
			Neither (Soon et al., 2001) nor (Ng and Cardie, 2002) searches for the global optimal entity in that they make locally independent decisions during search.
			In contrast, our decoder always searches for the best result ranked by the cumulative score (sub ject to pruning), and subsequent decisions depend on earlier ones.
			Recently, McCallum and Wellner (2003) proposed to use graphical models for computing probabilities ofentities.
			The model is appealing in that it can poten tially overcome the limitation of mention-pair model in which dependency among mentions other than the two in question is ignored.
			However, models in (McCallum and Wellner, 2003) compute directly the probability of an entity configuration conditioned on mentions, and it is not clear how the models can be factored to do the incremental search, as it is impractical to enumerate all possible entities even for documents with a moderate number of mentions.
			The Bell tree representation proposed in this paper, however, provides us with a naturally incremental framework for coreference resolution.
			Maximum entropy method has been used in coreference resolution before.
			For example, Kehler (1997) uses a mention-pair maximum entropy model, and two methods are proposed to compute entity scores based on the mention-pair model: 1) a distribution over entity space is deduced; 2) the most recent mention of an entity, together with the candidate mention, is used to compute the entity-mention score.
			In contrast, in our mention pair model, an entity-mention pair is scored by taking the maximum score among possible mention pairs.
			Our entity-mention model eliminates the need to synthesize an entity-mention score from mention-pair scores.
			Morton (2000) also uses a maximum entropy mention-pair model, and a special “dummy” mention is used to model the event of starting a new entity.
			Features involving the dummy mention are essentially computed with the single (normal) mention, and therefore the starting model is weak.
			In our model, the starting model is obtained by “complementing” the linking scores.
			The advantage is that we do not need to train a starting model.
			To compensate the model inaccuracy, we introduce a “starting penalty” to balance the linking and starting scores.
			To our knowledge, the paper is the first time the Bell tree is used to represent the search space of the coreference resolution problem.
	
	
			We propose to use the Bell tree to represent the process of forming entities from mentions.
			The Bell tree represents the search space of the coreference resolution problem.
			We studied two maximum entropy models, namely the mention-pair model and the entity- mention model, both of which can be used to score entity hypotheses.
			A beam search algorithm is used to search the best entity result.
			State-of-the-art performance has been achieved on the ACE coreference data across three languages.
	
	
			This work was partially supported by the Defense Advanced Research Projects Agency and monitored by SPAWAR under contract No.
			N6600199-28916.
			The views and findings contained in this material are those of the authors and do not necessarily reflect the position of policy of the Government and no official endorsement should be inferred.
			We also would like to thank the anonymous reviewers for suggestions of improving the paper.
	
